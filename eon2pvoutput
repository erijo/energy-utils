#!/usr/bin/env python3

# Copyright (c) 2016 Erik Johansson <erik@ejohansson.se>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA

from eon import Eon
from pvoutput import PvOutput, DefaultOutput, DefaultStatus

from datetime import datetime, timedelta, time
from getpass import getpass
from itertools import accumulate

import argparse
import configparser
import logging


def main():
    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s')

    parser = argparse.ArgumentParser(
        description="Connect eon.se to PVoutput.org")
    parser.add_argument('config', help="Configuration file to use")
    parser.add_argument('-d', '--debug', help="Enable debug output",
                        action="store_true")
    parser.add_argument('-n', '--dry-run', help="Don't send any data",
                        action="store_true")
    args = parser.parse_args()

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    config = configparser.ConfigParser()
    config['eon'] = {}
    config['pvoutput'] = {}
    config.read(args.config)

    modified = False
    if not config['eon'].get('email'):
        config['eon']['email'] = input("eon.se e-mail: ")
        modified = True
    if not config['eon'].get('password'):
        config['eon']['password'] = getpass("eon.se password: ")
        modified = True
    if not config['eon'].get('import'):
        config['eon']['import'] = input("eon.se import id: ")
        modified = True
    if not config['eon'].get('export'):
        config['eon']['export'] = input("eon.se export id: ")
        modified = True

    if not config['pvoutput'].get('apikey'):
        config['pvoutput']['apikey'] = input("PVOutput API key: ")
        modified = True
    if not config['pvoutput'].get('systemid'):
        config['pvoutput']['systemid'] = input("PVOutput System Id: ")
        modified = True

    if modified:
        with open(args.config, 'w') as configfile:
            config.write(configfile)

    eon = Eon(config['eon']['email'], config['eon']['password'])
    eon.log_in()

    yesterday = (datetime.now() - timedelta(days=1)).date()
    imp = eon.get_month_import(config['eon']['import'], yesterday)
    exp = eon.get_month_export(config['eon']['export'], yesterday)

    imp_day = [v for v in imp[yesterday.day - 1] if v is not None]
    exp_day = [v for v in exp[yesterday.day - 1] if v is not None]

    logging.debug("%s: %u h (%.2f kWh) import, %u h (%.2f kWh) export",
                  yesterday, len(imp_day), sum(imp_day) / 1000.0,
                  len(exp_day), sum(exp_day) / 1000.0)
    logging.debug("Import: %s", imp_day)
    logging.debug("Export: %s", exp_day)

    eon.log_out()

    pvoutput = PvOutput(config['pvoutput']['apikey'],
                        config['pvoutput']['systemid'],
                        args.dry_run)

    statuses = pvoutput.get_status(date=yesterday, history=True, asc=True)

    to_send = []
    imp_day_sum = [0] + list(accumulate(imp_day))
    exp_day_sum = [0] + list(accumulate(exp_day))
    for status in statuses:
        hour = status.datetime.hour
        if hour >= min(len(imp_day), len(exp_day)):
            break

        minute = status.datetime.minute
        if hour == 23 and minute == 55:
            minute = 60
        assert(minute <= 60)

        energy = imp_day_sum[hour] + imp_day[hour] * minute // 60
        energy += status.energy_generation
        energy -= exp_day_sum[hour] + exp_day[hour] * minute // 60
        energy = max(0, energy)

        power = imp_day[hour]
        power += status.power_generation
        power -= exp_day[hour]
        power = max(0, power)

        if (energy == status.energy_consumption
            and power == status.power_consumption):
            continue
        to_send.append(DefaultStatus._replace(
            datetime=status.datetime,
            energy_consumption=energy,
            power_consumption=power))

    if to_send:
        pvoutput.add_batch_status(to_send)

    if to_send and len(imp_day) == 24 and len(exp_day) == 24:
        consumption = imp_day_sum[24]
        consumption += statuses[-1].energy_generation
        consumption -= exp_day_sum[24]

        output = DefaultOutput._replace(
            datetime=yesterday,
            exported=exp_day_sum[24],
            consumption=consumption)
        pvoutput.add_output(output)


if __name__ == '__main__':
    main()
