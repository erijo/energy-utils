#!/usr/bin/env python3

# Copyright (c) 2016-2017 Erik Johansson <erik@ejohansson.se>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA

from eon import Eon
from pvoutput import PvOutput, DefaultOutput

from datetime import date, timedelta
from getpass import getpass

import argparse
import configparser
import logging

SHOULDER_HOURS_1 = slice(6, 8)
PEAK_HOURS = slice(8, 17)
HIGH_SHOULDER_HOURS = slice(17, 20)
SHOULDER_HOURS_2 = slice(20, 23)


def get_outputs_missing_import_export(pvoutput):
    yesterday = date.today() - timedelta(days=1)

    missing = []

    for output in pvoutput.get_output(date_to=yesterday, limit=35):
        if (output.import_peak is None
            or output.exported is None
            or (output.import_peak + output.import_off_peak
                + output.import_shoulder + output.import_high_shoulder) == 0):
            missing.append(output)

    missing.reverse()
    return missing


def _get_import_export(func, installation_id, day, cache):
    key = day.replace(day=1)
    if key not in cache:
        cache[key] = func(installation_id, day)
    data = cache[key][day.day - 1]
    if None in data:
        return None
    return data


def get_import(eon, installation_id, day, cache={}):
    return _get_import_export(
        eon.get_month_import, installation_id, day, cache)


def get_export(eon, installation_id, day, cache={}):
    return _get_import_export(
        eon.get_month_export, installation_id, day, cache)


def main():
    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s')

    parser = argparse.ArgumentParser(
        description="Connect eon.se to PVoutput.org")
    parser.add_argument('config', help="Configuration file to use")
    parser.add_argument('-d', '--debug', help="Enable debug output",
                        action="store_true")
    parser.add_argument('-n', '--dry-run', help="Don't send any data",
                        action="store_true")
    args = parser.parse_args()

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    config = configparser.ConfigParser()
    config['eon'] = {}
    config['pvoutput'] = {}
    config.read(args.config)

    modified = False
    if not config['eon'].get('email'):
        config['eon']['email'] = input("eon.se e-mail: ")
        modified = True
    if not config['eon'].get('password'):
        config['eon']['password'] = getpass("eon.se password: ")
        modified = True
    if not config['eon'].get('import'):
        config['eon']['import'] = input("eon.se import id: ")
        modified = True
    if not config['eon'].get('export'):
        config['eon']['export'] = input("eon.se export id: ")
        modified = True

    if not config['pvoutput'].get('apikey'):
        config['pvoutput']['apikey'] = input("PVOutput API key: ")
        modified = True
    if not config['pvoutput'].get('systemid'):
        config['pvoutput']['systemid'] = input("PVOutput System Id: ")
        modified = True

    if modified:
        with open(args.config, 'w') as configfile:
            config.write(configfile)

    pvoutput = PvOutput(config['pvoutput']['apikey'],
                        config['pvoutput']['systemid'],
                        args.dry_run)

    missing = get_outputs_missing_import_export(pvoutput)
    logging.debug("Missing export/import for: %s",
                  [o.date.strftime("%Y-%m-%d") for o in missing])
    if not missing:
        return

    eon = Eon(config['eon']['email'], config['eon']['password'])
    eon.log_in()

    for output in missing:
        imp = get_import(eon, config['eon']['import'], output.date)
        exp = get_export(eon, config['eon']['export'], output.date)
        if imp is None or exp is None:
            continue

        imp_sum = sum(imp)
        exp_sum = sum(exp)

        logging.debug("Found export %d Wh and import %d Wh for %s",
                      exp_sum, imp_sum, output.date.strftime("%Y-%m-%d"))

        imp_peak = sum(imp[PEAK_HOURS])
        imp_shoulder = sum(imp[SHOULDER_HOURS_1]) + sum(imp[SHOULDER_HOURS_2])
        imp_high_shoulder = sum(imp[HIGH_SHOULDER_HOURS])
        imp_off_peak = imp_sum - sum(
            [imp_peak, imp_shoulder, imp_high_shoulder])
        output = DefaultOutput._replace(
            date=output.date,
            exported=exp_sum,
            import_peak=imp_peak,
            import_off_peak=imp_off_peak,
            import_shoulder=imp_shoulder,
            import_high_shoulder=imp_high_shoulder,
            consumption=imp_sum + (output.generated - exp_sum))
        pvoutput.add_output(output)

    eon.log_out()


if __name__ == '__main__':
    main()
